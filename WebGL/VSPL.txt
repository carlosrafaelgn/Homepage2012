//
// VSPL.txt is distributed under the FreeBSD License
//
// Copyright (c) 2012, Carlos Rafael Gimenes das Neves
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met: 
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer. 
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution. 
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// The views and conclusions contained in the software and documentation are those
// of the authors and should not be interpreted as representing official policies, 
// either expressed or implied, of the FreeBSD Project.
//
// http://carlosrafaelgn.com.br/WebGL/VSPL.txt
//
uniform mat4 projectionMatrix, modelViewMatrix, normalMatrix;

attribute vec4 attribPos; //0
attribute vec3 attribNormal; //1
attribute vec4 attribColor; //2

varying vec4 position;
varying vec4 normal;
varying vec4 color;

void main()
{
	//apenas envia os valores para o outro shader
	//cuidado que a posição final do vértice precisa ser calculada duas vezes,
	//uma sem considerar a matriz de projeção, para ser enviada ao outro shader,
	//e a outra, que será utilizada como saída, considerando a matriz de projeção
	//isso porque as coordenadas da posição da luz, passada para o outro shader,
	//estão no sistema de coordenadas da vista e não consideram a projeção da câmera

	position = modelViewMatrix * attribPos;
	gl_Position = projectionMatrix * position;
	normal = normalMatrix * attribNormal.xyzx;
	color = attribColor;
}
